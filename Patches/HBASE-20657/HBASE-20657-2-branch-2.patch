From 4ebc5958d495723b8ca4c950fb7dfe1901327d09 Mon Sep 17 00:00:00 2001
From: ss77892 <ssa@apache.org>
Date: Mon, 4 Jun 2018 16:37:50 -0700
Subject: HBASE-20657 Retrying RPC call for ModifyTableProcedure may get stuck

---
 .../master/procedure/MasterProcedureScheduler.java |   3 +-
 .../master/procedure/ModifyTableProcedure.java     |  33 ++++++-
 .../assignment/TestConcurrentModifyTableProc.java  | 110 +++++++++++++++++++++
 3 files changed, 144 insertions(+), 2 deletions(-)
 create mode 100644 hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestConcurrentModifyTableProc.java

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterProcedureScheduler.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterProcedureScheduler.java
index d78efc6..288bb58 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterProcedureScheduler.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterProcedureScheduler.java
@@ -197,7 +197,8 @@ public class MasterProcedureScheduler extends AbstractProcedureScheduler {
       // check if the next procedure is still a child.
       // if not, remove the rq from the fairq and go back to the xlock state
       Procedure<?> nextProc = rq.peek();
-      if (nextProc != null && !Procedure.haveSameParent(nextProc, pollResult)) {
+      if (nextProc != null && !Procedure.haveSameParent(nextProc, pollResult)
+              && nextProc.getRootProcId() != pollResult.getRootProcId()) {
         removeFromRunQueue(fairq, rq);
       }
     }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
index 6fb9caa..99ef95f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
@@ -38,6 +38,7 @@ import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.client.TableDescriptor;
 import org.apache.hadoop.hbase.client.TableState;
 import org.apache.hadoop.hbase.master.MasterCoprocessorHost;
+import org.apache.hadoop.hbase.procedure2.Procedure;
 import org.apache.hadoop.hbase.procedure2.ProcedureStateSerializer;
 import org.apache.hadoop.hbase.util.ServerRegionReplicaUtil;
 import org.apache.yetus.audience.InterfaceAudience;
@@ -59,6 +60,8 @@ public class ModifyTableProcedure
   private List<RegionInfo> regionInfoList;
   private Boolean traceEnabled = null;
 
+  private volatile boolean lock = false;
+
   public ModifyTableProcedure() {
     super();
     initilize();
@@ -332,7 +335,35 @@ public class ModifyTableProcedure
     }
   }
 
-  /**
+  @Override
+  protected void releaseLock(final MasterProcedureEnv env) {
+    super.releaseLock(env);
+    lock = false;
+  }
+
+  @Override
+  protected boolean holdLock(MasterProcedureEnv env) {
+    return true;
+  }
+
+  @Override
+  protected boolean hasLock(final MasterProcedureEnv env) {
+    return lock;
+  }
+
+  @Override
+  protected LockState acquireLock(MasterProcedureEnv env) {
+    if (env.waitInitialized(this)) {
+      return LockState.LOCK_EVENT_WAIT;
+    }
+    if (env.getProcedureScheduler().waitTableExclusiveLock(this, getTableName())) {
+      return LockState.LOCK_EVENT_WAIT;
+    }
+    lock = true;
+    return LockState.LOCK_ACQUIRED;
+  }
+
+    /**
    * update replica column families if necessary.
    * @param env MasterProcedureEnv
    * @throws IOException
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestConcurrentModifyTableProc.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestConcurrentModifyTableProc.java
new file mode 100644
index 0000000..c3bef50
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestConcurrentModifyTableProc.java
@@ -0,0 +1,110 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.master.assignment;
+
+import static org.junit.Assert.fail;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.apache.hadoop.hbase.HBaseTestingUtility;
+import org.apache.hadoop.hbase.MiniHBaseCluster;
+import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.client.Admin;
+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptor;
+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;
+import org.apache.hadoop.hbase.client.RegionInfo;
+import org.apache.hadoop.hbase.client.TableDescriptor;
+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;
+import org.apache.hadoop.hbase.io.compress.Compression;
+import org.apache.hadoop.hbase.master.HMaster;
+import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
+import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
+import org.apache.hadoop.hbase.regionserver.HRegionServer;
+import org.apache.hadoop.hbase.testclassification.LargeTests;
+import org.apache.hadoop.hbase.testclassification.MasterTests;
+import org.apache.hadoop.hbase.util.Bytes;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+
+
+@Category({MasterTests.class, LargeTests.class})
+public class TestConcurrentModifyTableProc {
+  private HBaseTestingUtility UTIL;
+  private MiniHBaseCluster cluster;
+  private HMaster master;
+
+  @Before public void setUp() throws Exception {
+    UTIL = new HBaseTestingUtility();
+    cluster = UTIL.startMiniCluster(1, 1);
+    master = cluster.getMaster(0);
+  }
+
+  @Test public void testConcurrentModifyTable() throws IOException, InterruptedException {
+    TableName table = TableName.valueOf("test");
+    UTIL.createMultiRegionTable(table, Bytes.toBytes("C"), 10);
+    Admin admin = UTIL.getAdmin();
+    TableDescriptor tableDescriptor = admin.getDescriptor(table);
+    ColumnFamilyDescriptor[] columnDescriptors = tableDescriptor.getColumnFamilies();
+    ProcedureExecutor<MasterProcedureEnv> executor = master.getMasterProcedureExecutor();
+
+    TableDescriptorBuilder builder = TableDescriptorBuilder.newBuilder(tableDescriptor);
+    for (ColumnFamilyDescriptor descriptor : columnDescriptors) {
+      ColumnFamilyDescriptorBuilder cfd = ColumnFamilyDescriptorBuilder.newBuilder(descriptor);
+      cfd.setCompactionCompressionType(Compression.Algorithm.GZ);
+      builder.modifyColumnFamily(cfd.build());
+    }
+    TableDescriptorBuilder builder2 = TableDescriptorBuilder.newBuilder(tableDescriptor);
+    for (ColumnFamilyDescriptor descriptor : columnDescriptors) {
+      ColumnFamilyDescriptorBuilder cfd = ColumnFamilyDescriptorBuilder.newBuilder(descriptor);
+      cfd.setCompactionCompressionType(Compression.Algorithm.NONE);
+      builder2.modifyColumnFamily(cfd.build());
+    }
+
+    HRegionServer rs = cluster.getRegionServer(0);
+    Thread secondModifyTable = new Thread() {
+      @Override public void run() {
+        super.run();
+        // Wait until first MoveRegionProcedure is executed
+        UTIL.waitFor(30000,
+          () -> executor.getProcedures().stream()
+              .filter(p -> p instanceof MoveRegionProcedure)
+              .map(p -> (MoveRegionProcedure) p).anyMatch(p -> table.equals(p.getTableName())));
+        try {
+          admin.modifyTable(builder2.build());
+        } catch (IOException e) {
+          e.printStackTrace();
+        }
+      }
+    };
+    secondModifyTable.start();
+    admin.modifyTable(builder.build());
+    // Wait for the second thread completed
+    secondModifyTable.join();
+    List<RegionInfo> regionList = admin.getRegions(table);
+    RegionStates regionStates = master.getAssignmentManager().getRegionStates();
+    for (RegionInfo ri : regionList) {
+      if (!regionStates.isRegionOnline(ri)) {
+        fail("Region is not online: " + ri.getRegionNameAsString());
+      }
+    }
+  }
+}
-- 
2.7.4


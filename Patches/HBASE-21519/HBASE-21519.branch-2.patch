From d26ee012b61415423af6866bac5c285b345cf015 Mon Sep 17 00:00:00 2001
From: Pankaj <pankaj.kr@huawei.com>
Date: Wed, 5 Dec 2018 11:25:57 +0530
Subject: [PATCH] HBASE-21519, Namespace region is never assigned in a HM
 failover scenario and HM abort always due to init timeout

---
 .../hbase/wal/RegionGroupingProvider.java     |   4 +-
 .../TestMasterFailoverWithMultiWAL.java       | 133 ++++++++++++++++++
 2 files changed, 135 insertions(+), 2 deletions(-)
 create mode 100644 hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFailoverWithMultiWAL.java

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/RegionGroupingProvider.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/RegionGroupingProvider.java
index 28817e9cc37..d6a2f09ca38 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/RegionGroupingProvider.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/RegionGroupingProvider.java
@@ -156,7 +156,7 @@ public class RegionGroupingProvider implements WALProvider {
   }
 
   private WALProvider createProvider(String group) throws IOException {
-    if (META_WAL_PROVIDER_ID.equals(providerId)) {
+    if (META_WAL_GROUP_NAME.equals(group)) {
       return factory.createProvider(providerClass, META_WAL_PROVIDER_ID);
     } else {
       return factory.createProvider(providerClass, group);
@@ -189,7 +189,7 @@ public class RegionGroupingProvider implements WALProvider {
   @Override
   public WAL getWAL(RegionInfo region) throws IOException {
     String group;
-    if (META_WAL_PROVIDER_ID.equals(this.providerId)) {
+    if (region != null && region.isMetaRegion()) {
       group = META_WAL_GROUP_NAME;
     } else {
       byte[] id;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFailoverWithMultiWAL.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFailoverWithMultiWAL.java
new file mode 100644
index 00000000000..3f7a4b8a629
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFailoverWithMultiWAL.java
@@ -0,0 +1,133 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.master;
+
+import static org.junit.Assert.assertTrue;
+
+import org.apache.hadoop.hbase.HBaseClassTestRule;
+import org.apache.hadoop.hbase.HBaseCluster;
+import org.apache.hadoop.hbase.HBaseTestingUtility;
+import org.apache.hadoop.hbase.HRegionLocation;
+import org.apache.hadoop.hbase.MetaTableAccessor;
+import org.apache.hadoop.hbase.ServerName;
+import org.apache.hadoop.hbase.StartMiniClusterOption;
+import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.client.Admin;
+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;
+import org.apache.hadoop.hbase.client.RegionInfo;
+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;
+import org.apache.hadoop.hbase.testclassification.LargeTests;
+import org.apache.hadoop.hbase.testclassification.MasterTests;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.rules.TestName;
+
+@Category({ LargeTests.class, MasterTests.class })
+public class TestMasterFailoverWithMultiWAL {
+
+  @ClassRule
+  public static final HBaseClassTestRule CLASS_RULE =
+      HBaseClassTestRule.forClass(TestMasterFailoverWithMultiWAL.class);
+  @Rule
+  public TestName name = new TestName();
+
+  static HBaseTestingUtility util;
+  static Admin admin;
+  static HBaseCluster hbaseCluster;
+
+  // Start HBase cluster with 1 HM, 2 RS and 2 DN.
+  static StartMiniClusterOption option =
+      StartMiniClusterOption.builder().numMasters(1).numRegionServers(2).numDataNodes(2).build();
+
+  @BeforeClass
+  public static void setUpBeoforeClass() throws Exception {
+    util = new HBaseTestingUtility();
+    util.getConfiguration().set("hbase.master.init.timeout.localHBaseCluster", "120000");
+    // Enable multi wal feature
+    util.getConfiguration().set("hbase.wal.provider", "multiwal");
+    util.getConfiguration().set("hbase.wal.regiongrouping.strategy", "identity");
+
+    util.startMiniCluster(option);
+    hbaseCluster = util.getHBaseClusterInterface();
+    admin = util.getAdmin();
+  }
+
+  @AfterClass
+  public static void tearDownAfterClass() throws Exception {
+    util.shutdownMiniCluster();
+  }
+
+  @Test(timeout = 300000)
+  public void testMasterFailoverWithMultiWAL() throws Exception {
+    TableName tableName = TableName.valueOf(name.getMethodName());
+    try {
+      // Retrieve the namespace region and server location
+      RegionInfo nsRegion = admin.getRegions(TableName.NAMESPACE_TABLE_NAME).get(0);
+      HRegionLocation nsRegionLoc =
+          MetaTableAccessor.getRegionLocation(util.getConnection(), nsRegion);
+
+      // Retrieve meta region server name
+      ServerName metaRSName = hbaseCluster.getServerHoldingMeta();
+
+      // Make sure meta and namespace regions are assigned in different region server
+      while (metaRSName.equals(nsRegionLoc.getServerName())) {
+        admin.move(nsRegionLoc.getRegion().getEncodedNameAsBytes(), null);
+        nsRegionLoc = MetaTableAccessor.getRegionLocation(util.getConnection(), nsRegion);
+      }
+
+      // Flush the meta table
+      admin.flush(TableName.META_TABLE_NAME);
+
+      // Kill the region server where namespace region is assigned
+      hbaseCluster.killRegionServer(nsRegionLoc.getServerName());
+      hbaseCluster.waitForRegionServerToStop(nsRegionLoc.getServerName(), 60000);
+
+      // Wait until meta and namespace regions are assigned in same region server
+      while (!metaRSName.equals(nsRegionLoc.getServerName())) {
+        nsRegionLoc = MetaTableAccessor.getRegionLocation(util.getConnection(), nsRegion);
+      }
+
+      // Kill the region server where meta region is assigned
+      hbaseCluster.killRegionServer(metaRSName);
+      hbaseCluster.waitForRegionServerToStop(metaRSName, 60000);
+
+      // Kill the master
+      ServerName hmServerName = admin.getMaster();
+      hbaseCluster.killMaster(hmServerName);
+      hbaseCluster.waitForMasterToStop(hmServerName, 60000);
+
+      // Start the hbase cluster
+      util.startMiniHBaseCluster(option);
+
+      // Check master operation by creating table
+      TableDescriptorBuilder builder = TableDescriptorBuilder.newBuilder(tableName)
+          .setColumnFamily(ColumnFamilyDescriptorBuilder.of("cf"));
+      admin.createTable(builder.build());
+      assertTrue(admin.tableExists(tableName));
+    } finally {
+      if (admin.tableExists(tableName)) {
+        util.deleteTable(tableName);
+      }
+    }
+  }
+}
\ No newline at end of file
-- 
2.17.1


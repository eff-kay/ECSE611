From 18c618ac29ebe29f1b4b73276862d533d03ab373 Mon Sep 17 00:00:00 2001
From: Pankaj <pankaj.kr@huawei.com>
Date: Fri, 1 Feb 2019 00:56:51 +0530
Subject: [PATCH] HBASE-14498 Master stuck in infinite loop when all Zookeeper
 servers are unreachable

---
 .../hbase/regionserver/HRegionServer.java     |  4 +-
 .../hadoop/hbase/zookeeper/TestZKWatcher.java | 80 +++++++++++++++++
 .../hadoop/hbase/zookeeper/ZKWatcher.java     | 88 ++++++++++++++++++-
 3 files changed, 168 insertions(+), 4 deletions(-)
 create mode 100644 hbase-server/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKWatcher.java

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 34a6c13924..abe7e97975 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -619,8 +619,8 @@ public class HRegionServer extends HasThread implements
       // Some unit tests don't need a cluster, so no zookeeper at all
       if (!conf.getBoolean("hbase.testing.nocluster", false)) {
         // Open connection to zookeeper and set primary watcher
-        zooKeeper = new ZKWatcher(conf, getProcessName() + ":" +
-          rpcServices.isa.getPort(), this, canCreateBaseZNode());
+        zooKeeper = new ZKWatcher(conf, getProcessName() + ":" + rpcServices.isa.getPort(), this,
+            canCreateBaseZNode(), false, true);
         // If no master in cluster, skip trying to track one or look for a cluster status.
         if (!this.masterless) {
           if (conf.getBoolean(HBASE_SPLIT_WAL_COORDINATED_BY_ZK,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKWatcher.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKWatcher.java
new file mode 100644
index 0000000000..dc87e44f61
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKWatcher.java
@@ -0,0 +1,80 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable
+ * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
+ * for the specific language governing permissions and limitations under the License.
+ */
+package org.apache.hadoop.hbase.zookeeper;
+
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.Abortable;
+import org.apache.hadoop.hbase.HBaseClassTestRule;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.testclassification.MediumTests;
+import org.apache.hadoop.hbase.testclassification.ZKTests;
+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
+import org.apache.zookeeper.WatchedEvent;
+import org.apache.zookeeper.Watcher;
+import org.junit.ClassRule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@Category({ ZKTests.class, MediumTests.class })
+public class TestZKWatcher {
+
+  @ClassRule
+  public static final HBaseClassTestRule CLASS_RULE =
+      HBaseClassTestRule.forClass(TestZKWatcher.class);
+
+  private final static Logger LOG = LoggerFactory.getLogger(TestZKWatcher.class);
+
+  @Test
+  public void testConnectionEvent() throws IOException {
+    long zkSessionTimeout = 15000l;
+    Configuration conf = HBaseConfiguration.create();
+    conf.set("zookeeper.session.timeout", "15000");
+
+    Abortable abortable = new Abortable() {
+      boolean aborted = false;
+
+      @Override
+      public void abort(String why, Throwable e) {
+        aborted = true;
+        LOG.error(why, e);
+      }
+
+      @Override
+      public boolean isAborted() {
+        return aborted;
+      }
+    };
+    ZKWatcher watcher = new ZKWatcher(conf, "testConnectionEvent", abortable, false, false, true);
+
+    WatchedEvent event = new WatchedEvent(Watcher.Event.EventType.None,
+        Watcher.Event.KeeperState.Disconnected, null);
+
+    long startTime = EnvironmentEdgeManager.currentTime();
+    while (!abortable.isAborted()
+        && (EnvironmentEdgeManager.currentTime() - startTime < zkSessionTimeout)) {
+      watcher.process(event);
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+      }
+    }
+
+    assertTrue("Receiving Disconnected event from ZooKeeper infintely", abortable.isAborted());
+    watcher.close();
+  }
+}
diff --git a/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKWatcher.java b/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKWatcher.java
index ce00af4049..c77717eff3 100644
--- a/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKWatcher.java
+++ b/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKWatcher.java
@@ -24,6 +24,9 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -32,6 +35,7 @@ import org.apache.hadoop.hbase.Abortable;
 import org.apache.hadoop.hbase.AuthUtil;
 import org.apache.hadoop.hbase.ZooKeeperConnectionException;
 import org.apache.hadoop.hbase.security.Superusers;
+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.yetus.audience.InterfaceAudience;
 import org.apache.zookeeper.KeeperException;
@@ -72,7 +76,7 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
   private final RecoverableZooKeeper recoverableZooKeeper;
 
   // abortable in case of zk failure
-  protected Abortable abortable;
+  protected final Abortable abortable;
   // Used if abortable is null
   private boolean aborted = false;
 
@@ -90,6 +94,14 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
   /* A pattern that matches a Kerberos name, borrowed from Hadoop's KerberosName */
   private static final Pattern NAME_PATTERN = Pattern.compile("([^/@]*)(/([^/@]*))?@([^/@]*)");
 
+  // Connection timeout on disconnect event
+  private long connWaitTimeOut;
+  private AtomicBoolean connected = new AtomicBoolean(false);
+  private boolean forceAbortOnZKDisconnect;
+
+  // Execute service for zookeeper disconnect event watcher
+  private ExecutorService zkEventWatcherExecService = null;
+
   /**
    * Instantiate a ZooKeeper connection and watcher.
    * @param identifier string that is passed to RecoverableZookeeper to be used as
@@ -135,6 +147,26 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
   public ZKWatcher(Configuration conf, String identifier, Abortable abortable,
       boolean canCreateBaseZNode, boolean clientZK)
       throws IOException, ZooKeeperConnectionException {
+    this(conf, identifier, abortable, canCreateBaseZNode, clientZK, false);
+  }
+
+  /**
+   * Instantiate a ZooKeeper connection and watcher.
+   * @param conf the configuration to use
+   * @param identifier string that is passed to RecoverableZookeeper to be used as identifier for
+   *          this instance. Use null for default.
+   * @param abortable Can be null if there is on error there is no host to abort: e.g. client
+   *          context.
+   * @param canCreateBaseZNode true if a base ZNode can be created
+   * @param clientZK whether this watcher is set to access client ZK
+   * @param forceAbortOnZKDisconnect abort the watcher if true.
+   * @throws IOException if the connection to ZooKeeper fails
+   * @throws ZooKeeperConnectionException if the connection to Zookeeper fails when create base
+   *           ZNodes
+   */
+  public ZKWatcher(Configuration conf, String identifier, Abortable abortable,
+      boolean canCreateBaseZNode, boolean clientZK, boolean forceAbortOnZKDisconnect)
+      throws IOException, ZooKeeperConnectionException {
     this.conf = conf;
     if (clientZK) {
       String clientZkQuorumServers = ZKConfig.getClientZKQuorumServersString(conf);
@@ -159,6 +191,9 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
     this.identifier = identifier + "0x0";
     this.abortable = abortable;
     this.znodePaths = new ZNodePaths(conf);
+    // On Disconnected event a thread will wait for sometime (2/3 of zookeeper.session.timeout),
+    // it will abort the process if no SyncConnected event reported by the time.
+    this.connWaitTimeOut = this.conf.getLong("zookeeper.session.timeout", 90000) * 2 / 3;
     PendingWatcher pendingWatcher = new PendingWatcher();
     this.recoverableZooKeeper = ZKUtil.connect(conf, quorum, pendingWatcher, identifier);
     pendingWatcher.prepare(this);
@@ -175,6 +210,11 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
         throw zce;
       }
     }
+
+    this.forceAbortOnZKDisconnect = forceAbortOnZKDisconnect;
+    if (this.forceAbortOnZKDisconnect) {
+      this.zkEventWatcherExecService = Executors.newSingleThreadExecutor();
+    }
   }
 
   private void createBaseZNodes() throws ZooKeeperConnectionException {
@@ -541,11 +581,19 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
           Long.toHexString(this.recoverableZooKeeper.getSessionId());
         // Update our identifier.  Otherwise ignore.
         LOG.debug(this.identifier + " connected");
+        connected.set(true);
         break;
 
       // Abort the server if Disconnected or Expired
       case Disconnected:
-        LOG.debug(prefix("Received Disconnected from ZooKeeper, ignoring"));
+        LOG.debug(prefix("Received Disconnected from ZooKeeper."));
+        if (forceAbortOnZKDisconnect) {
+          connected.set(false);
+          ZKDisconnectEventWatcher task = new ZKDisconnectEventWatcher();
+          zkEventWatcherExecService.execute(task);
+        } else {
+          LOG.debug(prefix("Received Disconnected from ZooKeeper, ignoring."));
+        }
         break;
 
       case Expired:
@@ -568,6 +616,38 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
     }
   }
 
+  /*
+   * Task to watch zookeper disconnect event.
+   */
+  class ZKDisconnectEventWatcher implements Runnable {
+    @Override
+    public void run() {
+      if (connected.get()) {
+        return;
+      }
+
+      long startTime = EnvironmentEdgeManager.currentTime();
+      while (EnvironmentEdgeManager.currentTime() - startTime < connWaitTimeOut) {
+        if (connected.get()) {
+          LOG.debug(prefix("Client got reconnected to zookeeper."));
+          return;
+        }
+        try {
+          Thread.sleep(100);
+        } catch (InterruptedException e) {
+          Thread.currentThread().interrupt();
+          break;
+        }
+      }
+
+      if (!connected.get() && abortable != null) {
+        String msg = prefix(
+          "Couldn't connect to ZooKeeper after waiting " + connWaitTimeOut + " ms, aborting");
+        abortable.abort(msg, new KeeperException.ConnectionLossException());
+      }
+    }
+  }
+
   /**
    * Forces a synchronization of this ZooKeeper client connection.
    * <p>
@@ -633,6 +713,10 @@ public class ZKWatcher implements Watcher, Abortable, Closeable {
   public void close() {
     try {
       recoverableZooKeeper.close();
+      if (zkEventWatcherExecService != null) {
+        zkEventWatcherExecService.shutdown();
+        zkEventWatcherExecService = null;
+      }
     } catch (InterruptedException e) {
       Thread.currentThread().interrupt();
     }
-- 
2.17.1


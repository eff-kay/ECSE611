[[{"public class HLog": {" consolidateOldLog(Path srcDir, Path dstFile, FileSystem fs, Configuration conf)": [], " HLog(FileSystem fs, Path dir, Configuration conf)": [], " computeFilename(long filenum)": [], " obtainSeqNum(int num)": ["obtainSeqNum()"], " completeCacheFlush(Text regionName, Text tableName, long logSeqId)": []}}, {"public class HLog": {" consolidateOldLog(Path srcDir, Path dstFile, FileSystem fs, Configuration conf)": [], " HLog(FileSystem fs, Path dir, Configuration conf)": [], " computeFilename(long filenum)": [], " obtainSeqNum(int num)": ["obtainSeqNum()"], " completeCacheFlush(Text regionName, Text tableName, long logSeqId)": []}}, {"public class HLog": {" consolidateOldLog(Path srcDir, Path dstFile, FileSystem fs, Configuration conf)": [], " HLog(FileSystem fs, Path dir, Configuration conf)": [], " computeFilename(long filenum)": [], " obtainSeqNum(int num)": ["obtainSeqNum()"], " completeCacheFlush(Text regionName, Text tableName, long logSeqId)": []}}], [{"class HMemcacheScanner": {" HMemcacheScanner(long timestamp, Text targetCols[], Text firstRow)": [], " catch(Exception ex)": [], " findFirstRow(int i, Text firstRow)": [], " getNext(int i)": [], " closeSubScanner(int i)": []}}], [{"public class HRegion": {" closeAndMerge(HRegion srcA, HRegion srcB)": []}}, {"public class HRegion": {" closeAndMerge(HRegion srcA, HRegion srcB)": []}}, {"private class HScanner": {" closeScanner(int i)": []}}], [{"public class HServerAddress": {" HServerAddress(String hostAndPort)": [], " HServerAddress(String bindAddress, int port)": [], " HServerAddress(HServerAddress other)": ["address.getPort()"], " readFields(DataInput in)": [], " write(DataOutput out)": []}}], [{"public class HStore": {" HStore(Path dir, Text regionName, Text colFamily, int maxVersions, ...)": [], " flushCache(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["flushCacheHelper(inputCache, logCacheFlushId, true)"], " flushCacheHelper(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["getAllMapFiles()"], " compactHelper(boolean deleteSequenceInfo)": ["processReadyCompaction()"], " get(HStoreKey key, int numVersions)": [], " getLargestFileSize(Text midKey)": [], " obtainFileLabel(Path prefix)": [], " getScanner(long timestamp, Text targetCols[], ...)": []}}, {"public class HStore": {" HStore(Path dir, Text regionName, Text colFamily, int maxVersions, ...)": [], " flushCache(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["flushCacheHelper(inputCache, logCacheFlushId, true)"], " flushCacheHelper(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["getAllMapFiles()"], " compactHelper(boolean deleteSequenceInfo)": ["processReadyCompaction()"], " get(HStoreKey key, int numVersions)": [], " getLargestFileSize(Text midKey)": [], " obtainFileLabel(Path prefix)": [], " getScanner(long timestamp, Text targetCols[], ...)": []}}, {"public class HStore": {" HStore(Path dir, Text regionName, Text colFamily, int maxVersions, ...)": [], " flushCache(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["flushCacheHelper(inputCache, logCacheFlushId, true)"], " flushCacheHelper(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["getAllMapFiles()"], " compactHelper(boolean deleteSequenceInfo)": ["processReadyCompaction()"], " get(HStoreKey key, int numVersions)": [], " getLargestFileSize(Text midKey)": [], " obtainFileLabel(Path prefix)": [], " getScanner(long timestamp, Text targetCols[], ...)": []}}, {"public class HStore": {" HStore(Path dir, Text regionName, Text colFamily, int maxVersions, ...)": [], " flushCache(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["flushCacheHelper(inputCache, logCacheFlushId, true)"], " flushCacheHelper(TreeMap<HStoreKey, BytesWritable> inputCache, ...)": ["getAllMapFiles()"], " compactHelper(boolean deleteSequenceInfo)": ["processReadyCompaction()"], " get(HStoreKey key, int numVersions)": [], " getLargestFileSize(Text midKey)": [], " obtainFileLabel(Path prefix)": [], " getScanner(long timestamp, Text targetCols[], ...)": []}}], [{"public class HStoreFile": {" HStoreFile(Configuration conf)": [], " HStoreFile(Configuration conf, Path dir, Text regionName, ...)": [], " getMapDir(Path dir, Text regionName, Text colFamily)": [], " getInfoDir(Path dir, Text regionName, Text colFamily)": [], " getHStoreDir(Path dir, Text regionName, Text colFamily)": [], " getHRegionDir(Path dir, Text regionName)": [], " obtainNewHStoreFile(Configuration conf, Path dir, ...)": [], " loadHStoreFiles(Configuration conf, Path dir, ...)": [], " splitStoreFile(Text midKey, HStoreFile dstA, HStoreFile dstB, ...)": [], " mergeStoreFiles(Vector<HStoreFile> srcFiles, FileSystem fs, ...)": [], " loadInfo(FileSystem fs)": ["in.readLong()"], " writeInfo(FileSystem fs, long infonum)": [], " write(DataOutput out)": [], " readFields(DataInput in)": [], " compareTo(Object o)": [], " equals(Object o)": ["this.compareTo(o)"]}}], [{"public class HStoreKey": {" extractFamily(Text col)": [], " HStoreKey(Text row)": [], " HStoreKey(Text row, long timestamp)": [], " HStoreKey(Text row, Text column)": [], " HStoreKey(Text row, Text column, long timestamp)": [], " setRow(Text newrow)": [], " setColumn(Text newcol)": [], " setVersion(long timestamp)": [], " matchesRowCol(HStoreKey other)": [], " matchesWithoutColumn(HStoreKey other)": [], " compareTo(Object o)": [], " write(DataOutput out)": [], " readFields(DataInput in)": []}}]]